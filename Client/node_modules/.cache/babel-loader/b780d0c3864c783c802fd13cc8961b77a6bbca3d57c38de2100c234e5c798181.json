{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asus\\\\Desktop\\\\EchoBond\\\\client\\\\src\\\\components\\\\mainSpace\\\\album.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Album from \"../albumComponent/albumComponent\";\nimport \"./album.css\";\nimport { ClipLoader } from 'react-spinners'; // Importing a spinner from react-spinners\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Albums(props) {\n  _s();\n  const [allAlbums, setAllAlbums] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState('');\n  useEffect(() => {\n    // Fetch albums data when the component mounts\n    fetchAlbums();\n  }, []); // Empty dependency array means this effect runs only once after initial render\n\n  const fetchAlbums = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:4000/albums/get-all-albums\");\n      setAllAlbums(response.data); // Assuming the response contains an array of albums\n      setIsLoading(false);\n    } catch (error) {\n      console.error(\"Error fetching albums:\", error);\n      setError('Failed to fetch albums');\n      setIsLoading(false);\n    }\n  };\n  const handleAlbumClick = album => {\n    props.setSelectedAlbum(album); // Set selected album\n    console.log(album);\n    props.setChoice(\"AlbumSongs\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-white flex flex-row flex-wrap justify-center gap-16 overflow-y-auto h-full\",\n    children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center items-center w-full h-full\",\n      children: [/*#__PURE__*/_jsxDEV(ClipLoader, {\n        color: \"purple\",\n        size: 150\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 25\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 21\n    }, this) : allAlbums.length > 0 ? allAlbums.map((album, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: () => handleAlbumClick(album),\n      children: /*#__PURE__*/_jsxDEV(Album, {\n        image: album.image,\n        artist: album.artist,\n        name: album.name,\n        genre: album.style,\n        year: album.year\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 25\n      }, this)\n    }, album, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 21\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No albums found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 21\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 13\n  }, this);\n}\n_s(Albums, \"Ap81HC1H0zps3z0ORC69XuvotUI=\");\n_c = Albums;\nexport default Albums;\nvar _c;\n$RefreshReg$(_c, \"Albums\");","map":{"version":3,"names":["React","useState","useEffect","axios","Album","ClipLoader","jsxDEV","_jsxDEV","Albums","props","_s","allAlbums","setAllAlbums","isLoading","setIsLoading","error","setError","fetchAlbums","response","get","data","console","handleAlbumClick","album","setSelectedAlbum","log","setChoice","className","children","color","size","fileName","_jsxFileName","lineNumber","columnNumber","length","map","index","onClick","image","artist","name","genre","style","year","_c","$RefreshReg$"],"sources":["C:/Users/asus/Desktop/EchoBond/client/src/components/mainSpace/album.js"],"sourcesContent":["import React,{useState,useEffect} from \"react\";\r\nimport axios from \"axios\";\r\nimport Album from \"../albumComponent/albumComponent\";\r\nimport \"./album.css\"\r\nimport { ClipLoader } from 'react-spinners'; // Importing a spinner from react-spinners\r\n\r\n\r\n\r\n\r\nfunction Albums  (props){\r\n    \r\n    const[allAlbums,setAllAlbums] = useState([]);   \r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [error, setError] = useState('');\r\n\r\n    useEffect(() => {\r\n        // Fetch albums data when the component mounts\r\n        fetchAlbums();\r\n    }, []); // Empty dependency array means this effect runs only once after initial render\r\n    \r\n    const fetchAlbums = async () => {\r\n\r\n        try {\r\n            const response = await axios.get(\"http://localhost:4000/albums/get-all-albums\");\r\n            setAllAlbums(response.data); // Assuming the response contains an array of albums\r\n            setIsLoading(false);\r\n\r\n        } catch (error) {\r\n            console.error(\"Error fetching albums:\", error);\r\n            setError('Failed to fetch albums');\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n    \r\n    const handleAlbumClick = (album) => {\r\n        props.setSelectedAlbum(album); // Set selected album\r\n        console.log(album)\r\n        props.setChoice(\"AlbumSongs\");\r\n    };\r\n\r\n    return(\r\n            <div className=\"text-white flex flex-row flex-wrap justify-center gap-16 overflow-y-auto h-full\">\r\n                {isLoading ? (\r\n                    <div className=\"flex justify-center items-center w-full h-full\">\r\n                        <ClipLoader color=\"purple\" size={150} /> {/* Spinner component */}\r\n                    </div>\r\n                ) : allAlbums.length > 0 ? (\r\n                allAlbums.map((album, index) => (\r\n                    <div key={album} onClick={() => handleAlbumClick(album)}>\r\n                        <Album \r\n                            image={album.image}\r\n                            artist={album.artist}\r\n                            name={album.name}\r\n                            genre={album.style}\r\n                            year={album.year}\r\n                        />\r\n                    </div>\r\n                ))\r\n                ) : (\r\n                    <p>No albums found</p>\r\n                )}\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Albums;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}