{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asus\\\\Desktop\\\\EchoBond\\\\client\\\\src\\\\components\\\\audioBar.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from \"react\";\n\n// Import icons.\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faVolumeUp, faVolumeMute, faVolumeDown } from '@fortawesome/free-solid-svg-icons';\nimport \"../styles/handle.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AudioBar() {\n  _s();\n  const [volume, setVolume] = useState(1);\n  const [isHovered, setIsHovered] = useState(false);\n  const audio = useRef(null);\n  const handleVolumeChange = e => {\n    const newVolume = parseFloat(e.target.value);\n    setVolume(newVolume);\n    if (audio.current) {\n      audio.current.volume = newVolume;\n    }\n  };\n\n  // Updated sliderStyle to correctly reflect the initial appearance and dynamic changes\n  const sliderStyle = {\n    background: isHovered ? `linear-gradient(to right, #9818d6 ${volume * 100}%, #393e46 ${volume * 100}%)` :\n    // Purple to gray on hover\n    `linear-gradient(to right, white ${volume * 100}%, #393e46 ${volume * 100}%)`,\n    // White when not hovered\n    cursor: 'pointer',\n    appearance: 'none',\n    width: '100%',\n    height: '4px',\n    borderRadius: '9999px'\n  };\n  const chooseIcon = () => {\n    if (volume === 0) return faVolumeMute;else if (volume > 0 && volume <= 0.5) return faVolumeDown;else return faVolumeUp;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full flex flex-row items-end h-full gap-3\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"self-center mt-10 w-5\",\n      children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        icon: chooseIcon(),\n        className: \"text-gray-200 text-md\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"self-center mt-8\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: \"0\",\n        max: \"1\",\n        step: \"0.01\",\n        value: volume,\n        onMouseEnter: () => setIsHovered(true),\n        onMouseLeave: () => setIsHovered(false),\n        onChange: handleVolumeChange,\n        style: sliderStyle,\n        className: \"slider-thumb\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n}\n_s(AudioBar, \"uPGJGmpt91xlcvkv29zxO7hLfp0=\");\n_c = AudioBar;\nexport default AudioBar;\nvar _c;\n$RefreshReg$(_c, \"AudioBar\");","map":{"version":3,"names":["React","useState","useRef","FontAwesomeIcon","faVolumeUp","faVolumeMute","faVolumeDown","jsxDEV","_jsxDEV","AudioBar","_s","volume","setVolume","isHovered","setIsHovered","audio","handleVolumeChange","e","newVolume","parseFloat","target","value","current","sliderStyle","background","cursor","appearance","width","height","borderRadius","chooseIcon","className","children","icon","fileName","_jsxFileName","lineNumber","columnNumber","type","min","max","step","onMouseEnter","onMouseLeave","onChange","style","_c","$RefreshReg$"],"sources":["C:/Users/asus/Desktop/EchoBond/client/src/components/audioBar.js"],"sourcesContent":["import React, { useState, useRef } from \"react\"\r\n\r\n// Import icons.\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faVolumeUp, faVolumeMute, faVolumeDown } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport \"../styles/handle.css\"\r\n\r\nfunction AudioBar () {\r\n    const [volume, setVolume] = useState(1)\r\n    const [isHovered, setIsHovered] = useState(false)\r\n    const audio = useRef(null)\r\n\r\n    const handleVolumeChange = (e) => {\r\n        const newVolume = parseFloat(e.target.value)\r\n        setVolume(newVolume)\r\n        if (audio.current) {\r\n            audio.current.volume = newVolume\r\n        }\r\n    }\r\n\r\n    // Updated sliderStyle to correctly reflect the initial appearance and dynamic changes\r\n\tconst sliderStyle = {\r\n        background: isHovered ?\r\n        `linear-gradient(to right, #9818d6 ${volume * 100}%, #393e46 ${volume * 100}%)` : // Purple to gray on hover\r\n        `linear-gradient(to right, white ${volume * 100}%, #393e46 ${volume * 100}%)`, // White when not hovered\r\n        cursor: 'pointer',\r\n        appearance: 'none',\r\n        width: '100%',\r\n        height: '4px',\r\n        borderRadius: '9999px',\r\n    }\r\n\r\n    const chooseIcon = () => {\r\n        if (volume === 0)\r\n            return faVolumeMute\r\n        else if (volume > 0 && volume <= 0.5)\r\n            return faVolumeDown\r\n        else \r\n            return faVolumeUp\r\n    }\r\n\r\n    return (\r\n        <div className=\"w-full flex flex-row items-end h-full gap-3\">\r\n            <div className=\"self-center mt-10 w-5\">    \r\n                <FontAwesomeIcon icon={chooseIcon()} className=\"text-gray-200 text-md\" />\r\n            </div>\r\n            <div className=\"self-center mt-8\">\r\n                <input\r\n                    type=\"range\"\r\n                    min=\"0\"\r\n                    max=\"1\"\r\n                    step=\"0.01\"\r\n                    value={volume}\r\n                    onMouseEnter={() => setIsHovered(true)}\r\n                    onMouseLeave={() => setIsHovered(false)}\r\n                    onChange={handleVolumeChange}\r\n                    style={sliderStyle}\r\n                    className=\"slider-thumb\"\r\n                />\r\n            </div>                \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AudioBar"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;;AAE/C;AACA,SAASC,eAAe,QAAQ,gCAAgC;AAChE,SAASC,UAAU,EAAEC,YAAY,EAAEC,YAAY,QAAQ,mCAAmC;AAE1F,OAAO,sBAAsB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE7B,SAASC,QAAQA,CAAA,EAAI;EAAAC,EAAA;EACjB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EACvC,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAMc,KAAK,GAAGb,MAAM,CAAC,IAAI,CAAC;EAE1B,MAAMc,kBAAkB,GAAIC,CAAC,IAAK;IAC9B,MAAMC,SAAS,GAAGC,UAAU,CAACF,CAAC,CAACG,MAAM,CAACC,KAAK,CAAC;IAC5CT,SAAS,CAACM,SAAS,CAAC;IACpB,IAAIH,KAAK,CAACO,OAAO,EAAE;MACfP,KAAK,CAACO,OAAO,CAACX,MAAM,GAAGO,SAAS;IACpC;EACJ,CAAC;;EAED;EACH,MAAMK,WAAW,GAAG;IACbC,UAAU,EAAEX,SAAS,GACpB,qCAAoCF,MAAM,GAAG,GAAI,cAAaA,MAAM,GAAG,GAAI,IAAG;IAAG;IACjF,mCAAkCA,MAAM,GAAG,GAAI,cAAaA,MAAM,GAAG,GAAI,IAAG;IAAE;IAC/Ec,MAAM,EAAE,SAAS;IACjBC,UAAU,EAAE,MAAM;IAClBC,KAAK,EAAE,MAAM;IACbC,MAAM,EAAE,KAAK;IACbC,YAAY,EAAE;EAClB,CAAC;EAED,MAAMC,UAAU,GAAGA,CAAA,KAAM;IACrB,IAAInB,MAAM,KAAK,CAAC,EACZ,OAAON,YAAY,MAClB,IAAIM,MAAM,GAAG,CAAC,IAAIA,MAAM,IAAI,GAAG,EAChC,OAAOL,YAAY,MAEnB,OAAOF,UAAU;EACzB,CAAC;EAED,oBACII,OAAA;IAAKuB,SAAS,EAAC,6CAA6C;IAAAC,QAAA,gBACxDxB,OAAA;MAAKuB,SAAS,EAAC,uBAAuB;MAAAC,QAAA,eAClCxB,OAAA,CAACL,eAAe;QAAC8B,IAAI,EAAEH,UAAU,CAAC,CAAE;QAACC,SAAS,EAAC;MAAuB;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxE,CAAC,eACN7B,OAAA;MAAKuB,SAAS,EAAC,kBAAkB;MAAAC,QAAA,eAC7BxB,OAAA;QACI8B,IAAI,EAAC,OAAO;QACZC,GAAG,EAAC,GAAG;QACPC,GAAG,EAAC,GAAG;QACPC,IAAI,EAAC,MAAM;QACXpB,KAAK,EAAEV,MAAO;QACd+B,YAAY,EAAEA,CAAA,KAAM5B,YAAY,CAAC,IAAI,CAAE;QACvC6B,YAAY,EAAEA,CAAA,KAAM7B,YAAY,CAAC,KAAK,CAAE;QACxC8B,QAAQ,EAAE5B,kBAAmB;QAC7B6B,KAAK,EAAEtB,WAAY;QACnBQ,SAAS,EAAC;MAAc;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAAC3B,EAAA,CAvDQD,QAAQ;AAAAqC,EAAA,GAARrC,QAAQ;AAyDjB,eAAeA,QAAQ;AAAA,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}